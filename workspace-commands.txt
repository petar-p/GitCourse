GitBash commands from WORKSPACE to INDEX (Staging area)
-------------------------------------------------------

	command:
	--------
	
	git status
		Displays paths that differences between:
			- The index file and the current HEAD commit
			- The workspace and the index file
		Displays paths in the workspace that are NOT tracked by git.
		
	git diff
		Displays the differences not added to the index.
		
	git add <file or dir>
		Adds the current content of new or modified files to the index,
		thus staging that content for inclusion in the next commit.
		
		Use 'git add --interactive' or shorthand 'git add -i' to add 
		the modified contents from the workspace interactively to the index.
	
	git add -u
		Adds the current content of modified (NOT NEW) files to the index.
		
	git rm <file(s)>
		Remove a file/files from the workspace and the index.
		
	git mv <file(s)>
		Move file/files in the workspace and the index.
		
	git checkout <file(s) or dir>
		Updates the file/files or directory in the workspace. 
		DOES NOT SWITCH BRANCHES.
		
GitBash commands from WORKSPACE to LOCAL REPOSITORY 
---------------------------------------------------

	git diff <commit or branch>
		View the changes you have in your workspace relative to the named commit.
		You can use HEAD to compare it with the latest commit, or 
		a <branch name> to compare it with the tip of a different branch.
		
	git commit -a [-m 'commit message here']
		Commit all files changed since your last commit, except untracked files.
		These are all files that are already listed in the index.
		Remove files in the index that have been removed from the workspace.
		
	git checkout <branch>
		Switches branches by updating the index and workspace to reflect
		the specified <branch>, and updating HEAD to be <branch>. 
		
	git checkout -b <name of new branch>
		Creates a branch and swithes to it.
		
	git merge <commit or branch>
		Merge changes from <branch name> into current branch.
		Use '--no-commit' to leave changes uncommitted.
		
	git rebase <upstream>
		Reverts all commits since the current branch diverged from <upstream>, 
		and the re-applies them one-by-one on top of chnages from the HEAD 
		of <upstream>.
		
	git cherry-pick <commit>
		Intergrate changes in the given commit into the current branch.
		
	git revert <commit>
		Reverse commit specified by <commit> and commit the result.
		This requires the working tree to be clean.
		(Clean working tree: No modifications from the HEAD commit).
	
	git reset --hard
		Matches the workspace and index to the local tree.
		WARNING:
		Any changes to  tracked files in the working tree since commit are lost.
		Use this if merging has resulted in conflicts and you'd like to start over.
		Pass 'ORIG_HEAD' to undo the most recent successful merge and any changes
		after.
		
	
	
	